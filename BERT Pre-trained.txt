import os
import numpy as np
import torch
from torch.utils.data import Dataset, DataLoader
from transformers import BertTokenizer, BertModel, BertForSequenceClassification, AdamW

# Paths
sentences_file = "sentences.txt"  # Path to the text file with sentences (one per line)
output_path = "bert_embeddings"  # Path to save extracted embeddings
os.makedirs(output_path, exist_ok=True)

# Hyperparameters
MODEL_NAME = "bert-base-uncased"
MAX_LEN = 128
BATCH_SIZE = 8
EPOCHS = 3
LEARNING_RATE = 5e-5

# Load tokenizer and model
tokenizer = BertTokenizer.from_pretrained(MODEL_NAME)
model = BertModel.from_pretrained(MODEL_NAME)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)


# Custom Dataset
class TextDataset(Dataset):
    def __init__(self, sentences, tokenizer, max_len):
        self.sentences = sentences
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.sentences)

    def __getitem__(self, idx):
        sentence = self.sentences[idx]
        encoding = self.tokenizer(
            sentence,
            truncation=True,
            padding="max_length",
            max_length=self.max_len,
            return_tensors="pt",
        )
        return {
            "input_ids": encoding["input_ids"].squeeze(0),
            "attention_mask": encoding["attention_mask"].squeeze(0),
        }


# Load sentences
with open(sentences_file, "r") as f:
    sentences = [line.strip() for line in f.readlines()]

# Create Dataset and DataLoader
dataset = TextDataset(sentences, tokenizer, MAX_LEN)
dataloader = DataLoader(dataset, batch_size=BATCH_SIZE, shuffle=False)

# Extract embeddings
model.eval()
with torch.no_grad():
    for batch_idx, batch in enumerate(dataloader):
        input_ids = batch["input_ids"].to(device)
        attention_mask = batch["attention_mask"].to(device)

        # Forward pass
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        hidden_states = outputs.last_hidden_state  # Shape: (batch_size, seq_len, hidden_dim)

        # Pool the embeddings (mean of all tokens)
        embeddings = hidden_states.mean(dim=1).cpu().numpy()

        # Save each embedding
        for idx, embedding in enumerate(embeddings):
            sentence_id = batch_idx * BATCH_SIZE + idx + 1
            output_file = os.path.join(output_path, f"{sentence_id}.npy")
            np.save(output_file, embedding)

        print(f"Processed batch {batch_idx + 1}/{len(dataloader)}")

print("BERT embeddings saved successfully.")
